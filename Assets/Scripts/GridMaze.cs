using System;
using System.Collections;
using System.Collections.Generic;
using TreeEditor;
using UnityEngine;
using Random = UnityEngine.Random;

public class GridMaze : MonoBehaviour 
{
    [SerializeField]
    public GameObject cubePrefab;
    
    public GameObject plusPrefab;
    
    public List<Level> Levels;

    private int[,] _gridArray;

    private int _width;
    
    private int _height;

    private Vector2 _playerMatrixPos;
    

    void Start()
    {
	    SelectMatrix();
	    
	    _width = _gridArray.GetLength(0);
        _height = _gridArray.GetLength(1);
        int randomX = Random.Range(0, _width);
        int randomY = Random.Range(0, _height);
        if (_gridArray[randomX, randomY] == 0)
        {
	        _gridArray[randomX, randomY] = 2;
        }
        
        for (int x = 0; x < _width; x++)
        {
            for (int y = 0; y < _height; y++)
            {
                if (_gridArray[x, y] == 1)
                {
                    CreateCube(x, y);
                }
                
                if (_gridArray[x, y] == 2)
                {
	                SetCollectaables(x, y);
                }
            }
        }

        _playerMatrixPos.y = _height /2;

        
    }

    private void SelectMatrix()
    {
	    Levels = new List<Level>();
	    Level l1 = new Level(new int[,]
	    {
		    { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
		    { 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1 },
		    { 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1 },
		    { 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1 },
		    { 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1 },
		    { 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, -1 },
		    { 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1 },
		    { 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1 },
		    { 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1 },
		    { 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1 },
		    { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 }
	    });
	    Level l2 = new Level(new int[,]
	    {
		    { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
		    { 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1 },
		    { 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1 },
		    { 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1 },
		    { 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1 },
		    { 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, -1 },
		    { 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1 },
		    { 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1 },
		    { 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1 },
		    { 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1 },
		    { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 }
	    });
	    Level l3 = new Level(new int[,]
	    {
		    { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
		    { 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1 },
		    { 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1 },
		    { 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1 },
		    { 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1 },
		    { 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, -1 },
		    { 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1 },
		    { 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1 },
		    { 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1 },
		    { 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1 },
		    { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 }
	    });
	    Level l4 = new Level(new int[,]
	    {
		    { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
		    { 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1 },
		    { 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1 },
		    { 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
		    { 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1 },
		    { 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, -1 },
		    { 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1 },
		    { 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
		    { 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1 },
		    { 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1 },
		    { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 }
	    });
	    Levels.Add(l1);
	    Level l5 = new Level(new int[,]
	    {
		    { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
		    { 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1 },
		    { 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1 },
		    { 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1 },
		    { 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1 },
		    { 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, -1 },
		    { 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1 },
		    { 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1 },
		    { 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1 },
		    { 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1 },
		    { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 }
	    });
	    Level l6 = new Level(new int[,]
	    {
		    { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
		    { 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
		    { 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1 },
		    { 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1 },
		    { 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1 },
		    { 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, -1 },
		    { 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1 },
		    { 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1 },
		    { 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1 },
		    { 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
		    { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 }
	    });
	    Level l7 = new Level(new int[,]
	    {
		    { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
		    { 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1 },
		    { 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1 },
		    { 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1 },
		    { 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1 },
		    { 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, -1 },
		    { 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1 },
		    { 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1 },
		    { 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1 },
		    { 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1 },
		    { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 }
	    });
	    Level l26 = new Level(new int[,]
	    {
		    { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
		    { 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1 },
		    { 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1 },
		    { 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1 },
		    { 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1 },
		    { 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, -1 },
		    { 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1 },
		    { 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1 },
		    { 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1 },
		    { 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1 },
		    { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 }
	    });
	    Level l25 = new Level(new int[,]
	    {
		    { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
		    { 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1 },
		    { 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1 },
		    { 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1 },
		    { 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1 },
		    { 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, -1 },
		    { 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1 },
		    { 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1 },
		    { 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1 },
		    { 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1 },
		    { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 }
	    });
	    Level l24 = new Level(new int[,]
	    {
		    { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
		    { 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1 },
		    { 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1 },
		    { 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1 },
		    { 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1 },
		    { 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, -1 },
		    { 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1 },
		    { 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1 },
		    { 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1 },
		    { 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1 },
		    { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 }
	    });
	    Level l23 = new Level(new int[,]
	    {
		    { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
		    { 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
		    { 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1 },
		    { 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1 },
		    { 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1 },
		    { 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, -1 },
		    { 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1 },
		    { 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1 },
		    { 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1 },
		    { 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1 },
		    { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 }
	    });
	    Level l22 = new Level(new int[,]
	    {
		    { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
		    { 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
		    { 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1 },
		    { 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1 },
		    { 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1 },
		    { 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, -1 },
		    { 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1 },
		    { 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1 },
		    { 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1 },
		    { 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1 },
		    { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 }
	    });
	    Level l21 = new Level(new int[,]
	    {
		    { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
		    { 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
		    { 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1 },
		    { 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1 },
		    { 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1 },
		    { 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, -1 },
		    { 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1 },
		    { 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1 },
		    { 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1 },
		    { 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1 },
		    { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 }
	    });
	    Level l20 = new Level(new int[,]
	    {
		    { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
		    { 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1 },
		    { 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1 },
		    { 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1 },
		    { 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1 },
		    { 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, -1 },
		    { 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1 },
		    { 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1 },
		    { 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1 },
		    { 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1 },
		    { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 }
	    });
	    Level l19 = new Level(new int[,]
	    {
		    { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
		    { 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1 },
		    { 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1 },
		    { 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1 },
		    { 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1 },
		    { 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, -1 },
		    { 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1 },
		    { 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1 },
		    { 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1 },
		    { 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
		    { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 }
	    });
	    Level l18 = new Level(new int[,]
	    {
		    { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
		    { 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1 },
		    { 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1 },
		    { 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1 },
		    { 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1 },
		    { 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, -1 },
		    { 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1 },
		    { 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1 },
		    { 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1 },
		    { 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
		    { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 }
	    });
	    Level l17 = new Level(new int[,]
	    {
		    { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
		    { 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1 },
		    { 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
		    { 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1 },
		    { 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1 },
		    { 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, -1 },
		    { 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1 },
		    { 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1 },
		    { 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1 },
		    { 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1 },
		    { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 }
	    });
	    Level l16 = new Level(new int[,]
	    {
		    { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
		    { 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
		    { 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1 },
		    { 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1 },
		    { 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1 },
		    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1 },
		    { 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1 },
		    { 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1 },
		    { 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1 },
		    { 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1 },
		    { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 }
	    });
	    Level l15 = new Level(new int[,]
	    {
		    { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
		    { 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1 },
		    { 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1 },
		    { 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1 },
		    { 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1 },
		    { 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, -1 },
		    { 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1 },
		    { 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1 },
		    { 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1 },
		    { 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1 },
		    { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 }
	    });
	    Level l14 = new Level(new int[,]
	    {
		    { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
		    { 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1 },
		    { 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1 },
		    { 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1 },
		    { 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1 },
		    { 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, -1 },
		    { 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1 },
		    { 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1 },
		    { 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1 },
		    { 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1 },
		    { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 }
	    });
	    Level l13 = new Level(new int[,]
	    {
		    { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
		    { 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1 },
		    { 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1 },
		    { 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1 },
		    { 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1 },
		    { 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, -1 },
		    { 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1 },
		    { 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1 },
		    { 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1 },
		    { 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1 },
		    { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 }
	    });
	    Level l12 = new Level(new int[,]
	    {
		    { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
		    { 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1 },
		    { 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1 },
		    { 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1 },
		    { 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1 },
		    { 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, -1 },
		    { 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1 },
		    { 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1 },
		    { 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1 },
		    { 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1 },
		    { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 }
	    });
	    Level l11 = new Level(new int[,]
	    {
		    { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
		    { 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1 },
		    { 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1 },
		    { 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1 },
		    { 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1 },
		    { 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, -1 },
		    { 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1 },
		    { 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1 },
		    { 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1 },
		    { 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1 },
		    { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 }
	    });
	    Level l10 = new Level(new int[,]
	    {
		    { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
		    { 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1 },
		    { 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1 },
		    { 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1 },
		    { 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1 },
		    { 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, -1 },
		    { 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1 },
		    { 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1 },
		    { 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1 },
		    { 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1 },
		    { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 }
	    });
	    Level l9 = new Level(new int[,]
	    {
		    { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
		    { 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1 },
		    { 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1 },
		    { 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1 },
		    { 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1 },
		    { 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, -1 },
		    { 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1 },
		    { 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1 },
		    { 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1 },
		    { 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1 },
		    { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 }
	    });
	    Level l8 = new Level(new int[,]
	    {
		    { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
		    { 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1 },
		    { 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1 },
		    { 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1 },
		    { 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1 },
		    { 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, -1 },
		    { 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1 },
		    { 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1 },
		    { 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1 },
		    { 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1 },
		    { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 }
	    });
	    Levels.AddRange(new Level[] { l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l11, l12, l13, l14, l15, l16, l17, l18, l19, l20, l21, l22, l23, l24, l25, l26});
	    int index = Random.Range(0, Levels.Count);
	    _gridArray = Levels[index].matrix;
    }

    private GameObject CreateCube(int x, int y)
    {
        GameObject cubeObject = Instantiate(cubePrefab);
        cubeObject.transform.position =
            new Vector3(x - _width / 2, cubeObject.transform.localScale.y / 2, y - _height / 2);

        return cubeObject;
    }
    
    
    public GameObject SetCollectaables(int x, int y)
    {
	    
	    GameObject collectObject = Instantiate(plusPrefab);
	    
	    collectObject.transform.position =
		    new Vector3(x - _width / 2, collectObject.transform.localScale.y / 2, y - _height / 2);
	    
	    return collectObject;
    }
    
    public int GetStepsCount(Vector2 direction)
    {
	    int counter = 0;
	    // right
	    if (direction.x == 1)
	    {
		    for (int i = (int) _playerMatrixPos.x + 1; i < _width; i+= (int)direction.x)
		    {
			    if (_gridArray[(int) _playerMatrixPos.y, i] == 1)
			    {
				    _playerMatrixPos += counter * direction;
				    return counter;
			    }
			    counter++;
		    }
	    }
	    else if (direction.x == -1)
	    {
		    for (int i = (int) _playerMatrixPos.x - 1; i >= 0; i+= (int)direction.x)
		    {
			    if (_gridArray[(int) _playerMatrixPos.y, i] == 1)
			    {
				    _playerMatrixPos += counter * direction;
				    return counter;
			    }
			    counter++;
		    }
	    }
	    else if (direction.y == 1)
	    {
		    for (int i = (int) _playerMatrixPos.y + 1; i < +_height; i+= (int)direction.y)
		    {
			    if (_gridArray[i, (int) _playerMatrixPos.x] == 1)
			    {
				    _playerMatrixPos += counter * direction;
				    return counter;
			    }
			    counter++;
		    }
	    }
	    else if(direction.y == -1)
	    {
		    for (int i = (int) _playerMatrixPos.y - 1; i >= 0; i+= (int)direction.y)
		    {
			    if (_gridArray[i, (int) _playerMatrixPos.x] == 1)
			    {
				    _playerMatrixPos += counter * direction;
				    return counter;
			    }
			    counter++;
		    }
	    }

	    if (counter > 0)
	    {
		    _playerMatrixPos += counter * direction;
	    }
	    return counter;
    }

    public bool IsMazePassed()
    {
	    if (_gridArray[(int)_playerMatrixPos.y, (int)_playerMatrixPos.x] == -1)
	    {
		    return true;
	    }

	    return false;
    }
   
}